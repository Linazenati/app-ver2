// services/facebook.service.js

const axios = require('axios');
const fs = require('fs');
const FormData = require('form-data');
const path = require('path');
const { PAGE_ACCESS_TOKEN, PAGE_ID, GRAPH_API_VERSION } = require('../config/facebook.config');
const { sauvegarderCommentaires , supprimerCommentaireEnBase } = require('./commentaire.service');
const { Publication , Commentaire } = require('../models');
const { peutPublier, incrementerPublication,getEtatQuota } = require('./throttle.service');
const quotaService = require('../services/recuperationQuota.service');


const publishToFacebook = async (message, localImagePaths) => {
  const quota =  await getEtatQuota();
    console.log("üìä √âtat actuel du quota publication :", quota);

  // üîê V√©rifie le quota avant de publier
  if (!peutPublier()) {
    console.log("üö´ Trop de publications Facebook. R√©essaye plus tard.");
    throw new Error("Limite de publications atteinte.");
  }

  try {
    const mediaFbIds = [];

    // ‚úÖ √âtape 1 : Pour chaque image, on fait un upload "non publi√©"
    for (const imagePath of localImagePaths) {
      const form = new FormData();
      form.append('access_token', PAGE_ACCESS_TOKEN);
      form.append('published', 'false'); // important pour ne pas publier chaque image s√©par√©ment
      form.append('source', fs.createReadStream(imagePath)); // on lit l'image depuis le disque

      const response = await axios.post(
        `https://graph.facebook.com/${GRAPH_API_VERSION}/${PAGE_ID}/photos`,
        form,
        { headers: form.getHeaders() , timeout: 600000 }
      );

      // ‚úÖ On r√©cup√®re l'id de l'image pour l'associer plus tard √† la publication principale
      mediaFbIds.push({ media_fbid: response.data.id });
    }

    console.log('‚úÖ IDs des images upload√©es (non publi√©es) :', mediaFbIds);

    // ‚úÖ √âtape 2 : On cr√©e UNE seule publication avec le texte + les images d√©j√† upload√©es
    const postResponse = await axios.post(
      `https://graph.facebook.com/${GRAPH_API_VERSION}/${PAGE_ID}/feed`,
      {
        access_token: PAGE_ACCESS_TOKEN,
        message: message,
        attached_media: mediaFbIds // On attache toutes les images ici
      }

    );
// ‚úÖ Publication r√©ussie
    await incrementerPublication(); // ‚ûï Mise √† jour du quota apr√®s succ√®s
      console.log("üîÅ Incr√©mentation publication appel√©e");
  console.log("‚úÖ Publication Facebook r√©ussie et quota mis √† jour !");


    // ‚úÖ La publication a √©t√© cr√©√©e avec succ√®s
    return { post_id: postResponse.data.id };

 } catch (error) {
  const errorData = error.response?.data || error.message;
  console.error("‚ùå Erreur lors de la publication sur Facebook :", errorData);

  // üîç Gestion sp√©cifique pour les erreurs r√©seau ou quota
  if (error.code === 'ETIMEDOUT') {
    console.error("‚è±Ô∏è Temps d'attente d√©pass√© (timeout) lors de la requ√™te Facebook.");
  } else if (error.response?.status === 429) {
    console.error("üö´ Erreur de quota : trop de requ√™tes envoy√©es.");
  }

  // Tu peux aussi propager l'erreur √† un appelant si n√©cessaire :
  throw new Error("√âchec de la publication Facebook : " + errorData?.error?.message || error.message);
}
};

//recup√©rer la liste des publications
const getPublications = async () => {
  const url = `https://graph.facebook.com/${GRAPH_API_VERSION}/${PAGE_ID}/posts?access_token=${PAGE_ACCESS_TOKEN}`;

  try {
    const response = await axios.get(url);
    return response.data.data; // tableau des publications
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des publications :', error.response?.data || error.message);
    throw new Error("Impossible de r√©cup√©rer les publications");
  }
};

// üìù R√©cup√©rer les commentaires d'une publication
const recupererCommentaires = async (id_post_facebook) => {
  try {
    // V√©rifier et afficher √©tat du quota (optionnel, pour debug)
    const etatQuota = await quotaService.getEtatRecupQuota();
    console.log("üìä √âtat actuel des quotas :", etatQuota);

    // V√©rifier si on peut r√©cup√©rer (via quota)
    if (
      etatQuota.recupMinuteRestante <= 0 ||
      etatQuota.recupHeureRestante <= 0 ||
      etatQuota.recupJourRestante <= 0
    ) {
      console.warn("üö´ Quota de r√©cup√©ration atteint.");
      return []; // ou throw une erreur custom
    }

    // Incr√©menter le quota car on lance une r√©cup√©ration
    await quotaService.incrementerQuota();
   

    const url = `https://graph.facebook.com/${GRAPH_API_VERSION}/${id_post_facebook}/comments`;
    const response = await axios.get(url, {
      params: {
        access_token: PAGE_ACCESS_TOKEN,
      },
                  timeout: 200000, // ‚è∞ 10 secondes (ajoute cette ligne)

    });
  const commentaires = response.data.data;
    console.log('‚úÖ Commentaires r√©cup√©r√©s :', commentaires);

    const publication = await Publication.findOne({
      where: { id_post_facebook: id_post_facebook},
    });

    if (!publication) {
      console.warn("‚ö†Ô∏è Aucune publication trouv√©e pour cet ID Facebook");
      return [];
    }

    await sauvegarderCommentaires(publication.id, commentaires, 'facebook');
    console.log('‚úÖ Commentaires sauvegard√©s avec succ√®s.');
  
    return commentaires;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des commentaires Facebook:', error.response?.data || error.message);
    throw new Error('Erreur lors de la r√©cup√©ration des commentaires Facebook');
  }

};

// üìù R√©cup√©rer les Likes d'une publication
const recupererLikesFacebook = async (id_post_facebook) => {
 try {
    const url = `https://graph.facebook.com/${GRAPH_API_VERSION}/${id_post_facebook}?fields=reactions.summary(true)`;
    const response = await axios.get(url, {
      params: {
        access_token: PAGE_ACCESS_TOKEN,
      },
                        timeout: 200000, // ‚è∞ 10 secondes (ajoute cette ligne)

    });

    const nombreLikes = response.data.reactions?.summary?.total_count || 0;
    console.log('‚úÖ Nombre de Likes facebook:', nombreLikes);

    return nombreLikes;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du nombre de likes:', error.response?.data || error.message);
    throw new Error('Erreur lors de la r√©cup√©ration du nombre de likes');
  }
};




// üìù Supprimer un commentaire
const supprimerCommentaire = async (id_commentaire_facebook) => {
   try {
    const etatSuppQuota = await quotaService.getEtatSuppQuota();

  if (
    etatSuppQuota.suppMinuteRestante <= 0 ||
    etatSuppQuota.suppHeureRestante <= 0 ||
    etatSuppQuota.suppJourRestante <= 0
  ) {
    throw new Error('Quota de suppression d√©pass√©');
  }

  await quotaService.incrementerSuppQuota();
    const url = `https://graph.facebook.com/${GRAPH_API_VERSION}/${id_commentaire_facebook}`;
    console.log('üì° Suppression Facebook en cours...');
    console.log('üîó URL appel√©e :', url);

    const response = await axios.delete(url, {
      headers: {
        Authorization: `Bearer ${PAGE_ACCESS_TOKEN}`,
      },
      timeout: 20000,
    });

    console.log('‚úÖ R√©ponse Facebook :', response.data);

    // Recherche en base
    const commentaire = await Commentaire.findOne({
      where: { id_commentaire_facebook },
    });

    if (!commentaire) {
      console.warn("‚ö†Ô∏è Aucun commentaire trouv√© en base.");
      return response.data;
    }

    // Suppression en base
    await supprimerCommentaireEnBase(id_commentaire_facebook, commentaire.id_publication, 'facebook');
    console.log('‚úÖ Commentaire supprim√© en base.');
    return response.data;

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du commentaire :');
    if (error.response) {
      console.error('üì® Erreur response data :', error.response.data);
      throw new Error(JSON.stringify(error.response.data));
    } else {
      console.error('üß® Erreur inconnue :', error.message);
      throw new Error('Erreur inconnue lors de la suppression');
    }
  }
};

// üìù Masquer un commentaire
const masquerCommentaire = async (commentId) => {
  try {
    const url = `https://graph.facebook.com/${GRAPH_API_VERSION}/${commentId}`;
    const response = await axios.post(url, null, {
      params: {
        access_token: PAGE_ACCESS_TOKEN,
        is_hidden: true,
      },
                        timeout: 90000, // ‚è∞ 10 secondes (ajoute cette ligne)

    });
     console.log('‚úÖ R√©ponse Facebook (masquage r√©ussie) :', response.data);
    return response.data;
  } catch (error) {
    console.error('Erreur lors du masquage du commentaire:', error.response?.data || error.message);
    throw new Error('Erreur lors du masquage du commentaire');
  }
};


// ‚úÖ V√©rifier si une publication existe sur Facebook
const verifierPublicationFacebook = async (postId) => {
  try {
    const response = await axios.get(`https://graph.facebook.com/${GRAPH_API_VERSION}/${postId}`, {
      params: { access_token: PAGE_ACCESS_TOKEN },
      timeout: 30000,
    });
    return response.data && response.data.id === postId;
  } catch (error) {
    console.warn('‚ö†Ô∏è Publication non trouv√©e sur Facebook :', error.response?.data || error.message);
    return false;
  }
};
module.exports = {
  publishToFacebook,
  getPublications,
  recupererLikesFacebook,
  recupererCommentaires,
  supprimerCommentaire,
  masquerCommentaire,
  verifierPublicationFacebook
};
