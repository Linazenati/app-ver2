// controllers/instagram.controller.js

const path = require('path');
const { publishCarouselInstagram ,getPublications,recupererCommentaires,supprimerCommentaire,masquerCommentaire,recupererLikes} = require('../services/instagram.service');
const uploadToCloudinary = require('../middlewares/cloudinaryUpload');
const { Voyage} = require('../models');
const publicationService = require('../services/publication.service');
const voyageService = require("../services/voyageorganise.service");

/**
 * Contr√¥leur pour publier un voyage sur Instagram en carrousel.
 */
const publierSurInstagram = async (id) => {
  try {
    // 1Ô∏è‚É£ R√©cup√©ration du voyage
    const voyage = await Voyage.findByPk(id);
    if (!voyage) return res.status(404).json({ message: 'Voyage introuvable' });

    // 2Ô∏è‚É£ Emp√™cher la double publication
    if (voyage.instagram_post_id) {
      return res.status(400).json({ message: 'D√©j√† publi√© sur Instagram.' });
    }

    // 3Ô∏è‚É£ Parser et v√©rifier les images
    let images;
    try {
      images = JSON.parse(voyage.image || '[]');
      if (!Array.isArray(images) || images.length === 0) throw new Error();
    } catch {
      return res.status(400).json({ message: 'Aucune image valide.' });
    }

    // 4Ô∏è‚É£ Pr√©parer la l√©gende
    const caption =
      `üåç ${voyage.titre}\n` +
      `üìç ${voyage.destination}\n` +
      `üí∞ ${voyage.prix} ‚Ç¨\n` +
      `üìÖ ${voyage.date_de_depart}\n` +
      `üìù ${voyage.description}`;

    // 5Ô∏è‚É£ Upload local -> Cloudinary
    const imageUrls = [];
    for (const file of images) {
      const localPath = path.join(__dirname, '..', 'public', 'images', file);
      const publicUrl = await uploadToCloudinary(localPath);
      imageUrls.push(publicUrl);
    }
    console.log('üñºÔ∏è URLs Cloudinary :', imageUrls);

    // 6Ô∏è‚É£ Publier en carousel
    const result = await publishCarouselInstagram(imageUrls, caption);

    // 7Ô∏è‚É£ Enregistrer l'ID Instagram
    voyage.instagram_post_id = result.post_id;
    await voyage.save();

    //ins√©rer dans la table publication
    await publicationService.publier({
      plateforme: 'instagram',
      id_voyage: id,
      id_post_instagram:result.post_id 
    });

    // Modifier voyage vers `est_Publie: true`)
    const updatedVoyage = await voyageService.updateVoyage(id, { est_publier: true });

    
    console.log("Voyage mis √† jour : ", updatedVoyage);
        console.log("‚úÖ Voyage marqu√© comme publi√© sur instagram :",  result.post_id);

return ({ message: 'Publi√© sur Instagram', instagram_post_id: result.post_id });

} catch (error) {
  console.error("Erreur Instagram :", error.message);
  return ({ message: 'Erreur Instagram', error: error.message });
}
};



//publier instagram seulement sans multiple
const publierSurInstagralSeule = async (req, res) => {
  const id = req.params.id;
  try {
    const result = await publierSurInstagram(id);
    res.status(200).json(result);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

//recuperer tous les publications 
const getAllInstagramPublications = async (req, res) => {
  try {
    const publications = await getPublications();
    res.status(200).json(publications);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üìù R√©cup√©rer les commentaires d'une publication

let notificationsCount = 0;
let anciensCommentairesIds = [];
const recupererCommentairesPublication = async (req, res) => {
 const { instagram_post_id } = req.params;
  const cleanPostId = instagram_post_id.trim();

  console.log('ID de la publication instagram:', cleanPostId);

  try {
    if (!cleanPostId) {
      return res.status(400).json({ message: 'Le instagram_post_id est n√©cessaire pour r√©cup√©rer les commentaires' });
    }

    const commentaires = await recupererCommentaires(cleanPostId);

    // üõë Chercher les NOUVEAUX commentaires
    const nouveauxCommentaires = commentaires.filter(commentaire => {
      return !anciensCommentairesIds.includes(commentaire.id);
    });

    // üÜï Mettre √† jour la liste connue
    anciensCommentairesIds.push(...nouveauxCommentaires.map(c => c.id));

    // Si on d√©tecte des nouveaux commentaires
    if (nouveauxCommentaires.length > 0) {
      console.log('üîî Nouvelle notification :', nouveauxCommentaires.length, 'nouveaux commentaires d√©tect√©s');

      // ‚û°Ô∏è Ajouter au compteur de notifications
      notificationsCount += nouveauxCommentaires.length;
    }

    // R√©pondre normalement
    res.status(200).json({ commentaires, nouveauxCommentaires });

  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: error.message });
  }
};


// ‚û°Ô∏è Route pour r√©cup√©rer le compteur de notifications
const getNotificationsCount = (req, res) => {
  try {
    res.status(200).json({ count: notificationsCount });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration du compteur de notifications' });
  }
};

// ‚û°Ô∏è Route pour resetter le compteur (optionnel si tu veux le remettre √† 0 apr√®s lecture)
const resetNotificationsCount = (req, res) => {
  try {
    notificationsCount = 0;
    res.status(200).json({ message: 'Compteur de notifications r√©initialis√©' });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la r√©initialisation du compteur de notifications' });
  }
};

// üìù Supprimer un commentaire
const supprimerCommentairePublication = async (req, res) => {
  const { commentId } = req.params;
  console.log('üîç Suppression du commentaire Facebook...');
  console.log('üÜî Commentaire ID re√ßu :', commentId);
  try {
    const reponse = await supprimerCommentaire(commentId);
    res.status(200).json(reponse);
  } catch (error) {
    console.error('üö´ Erreur finale renvoy√©e au client :', error.message);
    res.status(500).json({ message: error.message });
  }
};

// üìù Masquer un commentaire
const masquerCommentairePublication = async (req, res) => {
const { commentId } = req.params; // üîÅ Au lieu de req.params
  console.log('üÜî Commentaire ID re√ßu :', commentId);

  if (!commentId) {
    return res.status(400).json({ message: "commentId manquant" });
  }
  try {
    const result = await masquerCommentaire(commentId);
    res.status(200).json({ success: true, data: result });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// üìù R√©cup√©rer les nmbr likes d'une publication
const recupererLikesPublication = async (req, res) => {
  const { instagram_post_id } = req.params;

console.log('ID de la publication Facebook:', instagram_post_id);

try {
  
    // R√©cup√©rer les likes en fonction de facebook_post_id
    const likes = await recupererLikes(instagram_post_id);  // Appeler la fonction pour r√©cup√©rer les likes
    res.status(200).json(likes);  // Retourner les likes
  } catch (error) {
    res.status(500).json({ message: error.message });  // Gestion des erreurs
  }
};

module.exports =
{
  publierSurInstagram,
  publierSurInstagralSeule,
    recupererCommentairesPublication,
     getNotificationsCount,
    resetNotificationsCount,
    getAllInstagramPublications,
    supprimerCommentairePublication,
    masquerCommentairePublication,
    recupererLikesPublication
};
