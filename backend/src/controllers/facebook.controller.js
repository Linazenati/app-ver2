const path = require('path');
const axios = require('axios');
const { PAGE_ACCESS_TOKEN, GRAPH_API_VERSION , PAGE_ID } = require('../config/facebook.config');
const publicationService = require('../services/publication.service');
const voyageService = require("../services/voyageorganise.service");
const omraService = require('../services/omra.service'); // service similaire √† voyageorganise.service
const { publishToFacebook , getPublications,recupererCommentaires,supprimerCommentaire, masquerCommentaire ,recupererLikes,  verifierPublicationFacebook
} = require('../services/facebook.service');

const { Voyage ,Omra , Commentaire} = require('../models');

// ‚úÖ Publier un voyage sur Facebook
const publierSurFacebook = async (id) => {
 
  console.log("üì¢ Publication Facebook re√ßue pour ID voyage :", id);
  // ... suite du traitement ...


  try {

    const voyage = await Voyage.findByPk(id);
    if (!voyage) {
      console.error('Voyage non trouv√©');
  throw new Error("Voyage introuvable");
    }

    console.log('Voyage r√©cup√©r√© :', voyage);


    const now = new Date();
if (new Date(voyage.date_de_depart) < now) {
  console.warn("‚ùå La date de d√©part est d√©j√† pass√©e. Impossible de publier.");
  return { message: "Impossible de publier : la date de d√©part est d√©j√† pass√©e." };
    }
    

    // 2. V√©rifier si publication Facebook existe d√©j√†
    const publicationExistante = await publicationService.getByPlatformAndVoyage('facebook', id);
    if (publicationExistante) {
console.warn("‚ö†Ô∏è Publication d√©j√† existante sur Facebook pour ce voyage.");
  return { message: 'Ce voyage a d√©j√† √©t√© publi√© sur Facebook.', dejaPublie: true };    } 
    // ‚úÖ Parse le champ image (un seul tableau JSON stringifi√©)
    let images = [];
    try {
      if (voyage.image) {
        images = JSON.parse(voyage.image);
        console.log("Images apr√®s parsing : ", images);

        if (!Array.isArray(images)) {
          throw new Error("Les images ne sont pas dans un tableau valide");
        }
      } else {
        throw new Error("Aucune image trouv√©e dans le voyage");
      }
    } catch (error) {
      console.error("Erreur lors du parsing des images :", error.message);
      return res.status(400).json({ message: 'Le format des images est incorrect' });
    }

    // ‚úÖ G√©n√®re les chemins locaux des images
    const localImagePaths = images.map(image =>
      path.join(__dirname, '..', 'public', 'images', image)
    );
    console.log('üì∏ Chemins des images locales :', localImagePaths);

    // ‚úÖ Message √† publier
    const message = `üåç Nouveau voyage : ${voyage.titre}
üìç Description: ${voyage.description}
üí∞ Prix : ${voyage.prix} ‚Ç¨
üìÖ Date de d√©part : ${voyage.date_de_depart}
üìÖ Date de retour : ${voyage.date_de_retour} 
üîó R√©servez votre place ici : https://1ed6-154-248-34-163.ngrok-free.app/web/infos_voyage/${voyage.id}`;
    
    // ‚úÖ Publication sur Facebook
    const result = await publishToFacebook(message, localImagePaths);
    console.log('üì® R√©ponse Facebook :', result);
    
    

    // ‚úÖ V√©rification avant l'enregistrement
    const existeSurFacebook = await verifierPublicationFacebook(result.post_id);
    if (!existeSurFacebook) {
      console.warn("‚ö†Ô∏è La publication n'existe pas sur Facebook, annulation de l'enregistrement.");
      return { message: '√âchec de la publication sur Facebook. V√©rifiez l\'ID.' };
    }



    // ‚úÖ Enregistrement du post_id dans la BDD
    voyage.facebook_post_id = result.post_id || result.id;
    await voyage.save();


    //ins√©rer dans la table publication
    await publicationService.publier({
      plateforme: 'facebook',
      id_voyage: id,
      id_post_facebook: result.post_id || result.id,
      url_post: `https://www.facebook.com/${result.post_id || result.id}`
    });

    // Modifier voyage vers `est_Publie: true`)
    const updatedVoyage = await voyageService.updateVoyage(id, { est_publier: true });

    console.log("Voyage mis √† jour : ", updatedVoyage);
        console.log("‚úÖ Voyage marqu√© comme publi√© sur fb :",  result.post_id);
    
  // ‚úÖ Envoyer r√©ponse une seule fois
  return ({ message: 'Publi√© sur Facebook', postId: result.post_id });

} catch (error) {
  console.error("‚ùå Erreur lors de la publication :", error.message);
  return ({ message: 'Erreur Facebook', error: error.message });
}
};


// publier sur faceboook seulement sans multiple 
// ‚úÖ Route Express qui utilise req/res
const publierSurFacebookSeule = async (req, res) => {
  const id = req.params.id;
  try {
    const result = await publierSurFacebook(id);
    res.status(200).json(result);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};





//publier omra sur fb
const publierOmraSurFacebook = async (id) => {
  try {
    // R√©cup√©rer l'Omra par son id
    const omra = await Omra.findByPk(id);
    if (!omra) {
      console.error('Omra non trouv√©e');
      throw new Error("Omra introuvable");
    }

    console.log('Omra r√©cup√©r√©e :', omra);


    const now = new Date();
if (new Date(omra.date_de_depart) < now) {
  console.warn("‚ùå La date de d√©part de l'Omra est d√©pass√©e. Publication refus√©e.");
  return { message: "Impossible de publier : la date de d√©part est d√©pass√©e." };
    }
    
    // V√©rifier si la publication Facebook existe d√©j√†
    const publicationExistante = await publicationService.getByPlatformAndOmra('facebook', id);
    console.log('publicationExistante:', publicationExistante);
    if (publicationExistante) {
      console.warn("‚ö†Ô∏è Publication d√©j√† existante sur Facebook pour cette Omra.");
      return {
    status: 200,
    body: { message: 'Cette Omra a d√©j√† √©t√© publi√©e sur Facebook.' }
  };
    }

    // Gestion des images : soit tableau JSON, soit simple string
    let images = [];

try {
  if (omra.image) {
    if (omra.image.startsWith('[')) {
      images = JSON.parse(omra.image);
      if (!Array.isArray(images)) {
        throw new Error("Le champ 'image' n'est pas un tableau valide");
      }
    } else {
      images = [omra.image];
    }
  } else {
    throw new Error("Aucune image trouv√©e dans l'Omra");
  }
} catch (error) {
  console.error("Erreur lors du traitement de l'image :", error.message);
  return { message: 'Le format de l\'image est incorrect' };
}

    // G√©n√©rer les chemins locaux pour les images
    const localImagePaths = images.map(image =>
      path.join(__dirname, '..', 'public', 'images', image)
    );

    // Message √† publier (adapt√© aux donn√©es Omra)
    const message = `üïã Nouvelle Omra disponible : ${omra.titre}
üìç Description : ${omra.description}
üí∞ Prix : ${omra.prix} ‚Ç¨
üìÖ Date de d√©part : ${omra.date_de_depart}
üìÖ Dur√©e : ${omra.duree}
üîó R√©servez ici : https://1ed6-154-248-34-163.ngrok-free.app/web/infos_omra/${omra.id}`;

    // Publication sur Facebook
    const result = await publishToFacebook(message, localImagePaths);
    console.log('R√©ponse Facebook :', result);

    // V√©rification de la publication sur Facebook
    const existeSurFacebook = await verifierPublicationFacebook(result.post_id);
    if (!existeSurFacebook) {
      return { message: '√âchec de la publication sur Facebook. V√©rifiez l\'ID.' };
    }

    // Mise √† jour de la table Omra
    omra.facebook_post_id = result.post_id || result.id;
    await omra.save();

    // Insertion dans la table publication
    await publicationService.publier({
      plateforme: 'facebook',
      id_omra: id,   // attention : si ton champ s'appelle id_omra, adapte ici
      id_post_facebook: result.post_id || result.id,
      url_post: `https://www.facebook.com/${result.post_id || result.id}`
    });

    // Marquer comme publi√©
    const updatedOmra = await omraService.updateOmra(id, { est_publier: true });
    console.log("Omra mise √† jour :", updatedOmra);

    return { message: 'Publi√© sur Facebook', postId: result.post_id };

  } catch (error) {
    console.error("Erreur lors de la publication Omra :", error.message);
    return { message: 'Erreur Facebook', error: error.message };
  }
};





// publier sur faceboook seulement sans multiple 
// ‚úÖ Route Express qui utilise req/res
const publierOmraSurFacebookSeule = async (req, res) => {
  const id = req.params.id;
  try {
    const result = await publierOmraSurFacebook(id);
    res.status(200).json(result);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};



//recuperer tous les publications 
const getAllPublications = async (req, res) => {
  try {
    const publications = await getPublications();
    res.status(200).json(publications);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üìù R√©cup√©rer les commentaires d'une publication

let notificationsCount = 0;
let anciensCommentairesIds = [];
const recupererCommentairesPublication = async (req, res) => {
 const { id_post_facebook } = req.params;
  const cleanPostId = id_post_facebook.trim();

  console.log('ID de la publication Facebook:', cleanPostId);
try {
   

    const commentaires = await recupererCommentaires(cleanPostId);

    // üõë Chercher les NOUVEAUX commentaires
    const nouveauxCommentaires = commentaires.filter(commentaire => {
      return !anciensCommentairesIds.includes(commentaire.id);
    });

    // üÜï Mettre √† jour la liste connue
    anciensCommentairesIds.push(...nouveauxCommentaires.map(c => c.id));

    // Si on d√©tecte des nouveaux commentaires
    if (nouveauxCommentaires.length > 0) {
      console.log('üîî Nouvelle notification :', nouveauxCommentaires.length, 'nouveaux commentaires d√©tect√©s');

      // ‚û°Ô∏è Ajouter au compteur de notifications
      notificationsCount += nouveauxCommentaires.length;
    }

    // R√©pondre normalement
    res.status(200).json({ commentaires, nouveauxCommentaires });

  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: error.message });
  }
};

// ‚û°Ô∏è Route pour r√©cup√©rer le compteur de notifications
const getNotificationsCount = (req, res) => {
  try {
    res.status(200).json({ count: notificationsCount });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration du compteur de notifications' });
  }
};

// ‚û°Ô∏è Route pour resetter le compteur (optionnel si tu veux le remettre √† 0 apr√®s lecture)
const resetNotificationsCount = (req, res) => {
  try {
    notificationsCount = 0;
    res.status(200).json({ message: 'Compteur de notifications r√©initialis√©' });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la r√©initialisation du compteur de notifications' });
  }
};


// üìù R√©cup√©rer les nmbr likes d'une publication
const recupererLikesPublication = async (req, res) => {
  const { id_post_facebook } = req.params;

console.log('ID de la publication Facebook:',id_post_facebook);

try {
  
    // R√©cup√©rer les likes en fonction de facebook_post_id
    const likes = await recupererLikes(id_post_facebook);  // Appeler la fonction pour r√©cup√©rer les likes
    res.status(200).json(likes);  // Retourner les likes
  } catch (error) {
    res.status(500).json({ message: error.message });  // Gestion des erreurs
  }
};





// üìù Supprimer un commentaire
const supprimerCommentairePublication = async (req, res) => {
  const { commentId } = req.params;
  console.log('üîç Suppression du commentaire Facebook...');
  console.log('üÜî Commentaire ID re√ßu :', commentId);
  try {
    // 1Ô∏è‚É£ Trouver le commentaire dans la base pour obtenir l'ID Facebook
    const commentaire = await Commentaire.findByPk(commentId);

    if (!commentaire) {
      return res.status(404).json({ message: "Commentaire non trouv√© en base de donn√©es." });
    }

    const id_commentaire_facebook = commentaire.id_commentaire_facebook;

    if (!id_commentaire_facebook) {
      return res.status(400).json({ message: "Ce commentaire n'est pas li√© √† Facebook." });
    }

    // 2Ô∏è‚É£ Supprimer sur Facebook et en base de donn√©es
    const reponse = await supprimerCommentaire(id_commentaire_facebook);

    // 4Ô∏è‚É£ R√©pondre au client
    res.status(200).json(reponse);
  } catch (error) {
    console.error('üö´ Erreur finale renvoy√©e au client :', error.message);
    res.status(500).json({ message: error.message });
  }
};

// üìù Masquer un commentaire
const masquerCommentairePublication = async (req, res) => {
const { commentId } = req.params; // üîÅ Au lieu de req.params
  console.log('üÜî Commentaire ID re√ßu :', commentId);

  if (!commentId) {
    return res.status(400).json({ message: "commentId manquant" });
  }
  try {
    const result = await masquerCommentaire(commentId);
    res.status(200).json({ success: true, data: result });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

module.exports = {
  publierSurFacebook,
  publierSurFacebookSeule,
  publierOmraSurFacebook,
  publierOmraSurFacebookSeule,
  recupererCommentairesPublication,
    getNotificationsCount,
    resetNotificationsCount,
    recupererLikesPublication,
    getAllPublications,
    supprimerCommentairePublication,
  masquerCommentairePublication,
    
};
